#!/usr/bin/env bash
# ----------------------------------------------------------------------------
# Copyright 2018 Symphony Communication Services, LLC.
# 
# Licensed to The Symphony Software Foundation (SSF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The SSF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# -----------------------------------------------------------------------------

scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

adminUser=fugue-admin

set -e

awsprog=`which aws`

abort()
{
  echo Aborted.
  exit 0
}
  
aws()
{
  result=`${awsprog} $@ 2>&1`
  
  if $!
  then
    if [[ "${result}" =~ ^{.*}$ ]]
    then
      error=""
      diagnostic="OK"
      return 0
    else
      error=`echo ${result} | sed -e "s/.*(\([^)]*\)) *\(.*\)$/\1/"`
      diagnostic=`echo ${result} | sed -e "s/.*(\([^)]*\)) *\(.*\)$/\2/"`
      return 1
    fi
  else
    error="EXECUTION_FAILED"
    diagnostic=${result}
    return 1
  fi  
}

if aws sts get-caller-identity
then
  echo AWS credentials are good.
  accountId=`echo ${result} | sed -e 's/.*"Account": "\([0-9]*\)".*/\1/'`
  echo accountId ${accountId}
else
  echo AWS credentials are not valid, set AWS_PROFILE
  exit 1
fi

if aws iam get-user --user-name ${adminUser}
then
  echo Admin user exists, do you want to overwrite it?
  read x
  
  if [ "$x" == y ]
  then
    echo OK
  else
    abort
  fi
else
  case ${error} in
    NoSuchEntity)
      echo Admin user does not exist, initializing...
      ;;
  
    *)
      echo Cannot fetch user
      echo $error
      echo $diagnostic
      abort
      ;;
  esac
fi

if aws iam get-policy --policy-arn arn:aws:iam::${accountId}:policy/${adminUser}-policy
then
  echo policy exists.
else
  
fi